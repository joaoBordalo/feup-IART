/*
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. 
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 *  http://mozilla.org/MPL/2.0/. 
 *
 * Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006 National Research Council of Canada 
 * 
 * This software was initially developed at the National Research Council of Canada (NRC).
 *
 * THE NATIONAL RESEARCH COUNCIL OF CANADA MAKES NO REPRESENTATIONS OR
 * WARRANTIES ABOUT THE SUITABILITY OF THE SOFTWARE, EITHER EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT.
 * THE NATIONAL RESEARCH COUNCIL OF CANADA SHALL NOT BE LIABLE FOR ANY DAMAGES
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
 * THIS SOFTWARE OR ITS DERIVATIVES.
 *
 *
 */

 
package nrc.fuzzy;

import java.io.*;

/**
 * An implementation of the FuzzySetFunction interface to provide
 * a class with the ability to generate a FuzzySet that is the right half of a
 * gaussian-shaped curve with membership value 1 on the upper left to 0 on the lower right.
 * This class is typically used when constructing instances of the classes
 * RFuzzySet and LRFuzzySet. The GaussianFuzzySet for example is constructed using
 * the LeftGaussianFunction to create its left half and the RightGaussianFunction to create its
 * right half.

 * <br>
 * The curves are defined by the following equation:
 * <br> <br>
 * <img src = "NetGraphics/GaussianEquation.gif">
 * <br> <br>
 * where a is the mean and sigma is the standard deviation.
 *
 * @author Bob Orchard
 *
 * @see RFuzzySet
 * @see LRFuzzySet
 * @see GaussianFuzzySet
 * @see LeftGaussianFunction
 */
public class RightGaussianFunction implements FuzzySetFunction, Serializable
{
    /**
     * This value is used to determine the number of points that will be
     * in the gaussian-shaped fuzzy set generated by the 
     * <code>generateFuzzySet(double leftX, double rightX)</code> method,
     * unless it has a value of < 5, in which case the value of static (class)
     * variable, LeftGaussianFunctionDefaultNumPoints, will be used. This allows 
     * each instance of the LeftGaussianFunction to determine its own value for the number
     * of points to be generated. Initially it is set to have the value 0 so
     * that the RightGaussianFunctionDefaultNumPoints value is used. 
     * 
     */
    int defaultNumPoints = 0;
    
    /**
     * This value is used to determine the number of points that will be
     * in the gaussian-shaped fuzzy set generated by the 
     * <code>generateFuzzySet(double leftX, double rightX)</code> method
     * when the local instance variable defaultNumPoints has not been
     * set or is < 5. Initially it is set to have the value 9. 
     * 
     */
    static int rightGaussianFunctionDefaultNumPoints;

	static 
	{
		rightGaussianFunctionDefaultNumPoints = 9;
	}    

    /*===============================================
     *
     * CONSTRUCTORS
     *
     *==============================================*/

    /**
     * Creates an instance of an RightGaussianFunction that is used to generate Fuzzysets
     * with a gaussian-shape for their left part. A FuzzySet created will have a 0 
     * value at its left and a 1 value at its right.
     * 
     */
    public RightGaussianFunction()
    {}

    /**
     * Creates an instance of a RightGaussianFunction that is used to generate Fuzzysets
     * with a gaussian-shape for its right part. A FuzzySet created will have a 1 value 
     * at its left and a 0 value at its right. When created with this constructor a 
     * value for the number of points to be used when creating the gaussian-shaped 
     * fuzzy set is set (defaultNumPoints).
     * 
     * @param numPoints the number of points to use when creating the gaussian-shaped FuzzySet.
     */
    public RightGaussianFunction(int numPoints)
    {
        setNumPoints(numPoints);
    }
    
    /*===============================================
     *
     * METHODS
     *
     *==============================================*/

    /**
     * Creates a FuzzySet with an gaussian-shape such that the membership value is
     * 1 at the leftX value and 0 at the rightX value. The number of points in
     * the generated FuzzySet is determined by the settings of the local instance 
     * variable <code>defaultNumPoints</code> and the static class variable 
     * <code>rightGaussianFunctionDefaultNumPoints</code>.
     *
     * @param leftX  the upper left x value of the gaussian-shaped curve.
     * @param rightX the lower right x value of the gaussian-shaped curve.
     */
    public FuzzySet generateFuzzySet(double leftX, double rightX)
    {
        if(defaultNumPoints < 5) return(generateFuzzySet(leftX, rightX, rightGaussianFunctionDefaultNumPoints));
        else                     return(generateFuzzySet(leftX, rightX, defaultNumPoints));
    }

    /**
     * Creates a FuzzySet with a gaussian-shape such that the membership value is
     * 1 at the leftX value and 0 at the rightX value. The number of points in
     * the generated FuzzySet is determined by the the paramter numberOfPoints
     * if it is acceptable (>= 5) or it is set to 5. 
     * The right point is actually 4 standard deviations from the left (centre) point of
     * the gaussian curve. The right point and all point to its right are assumed to be zero.
     * <br>
     * The equation for the gaussian curve is:
     * <br><pre><code>
     *
     *    f(x)  =  e ** ((-(x-c)**2)/(2*sigma))
     *
     *    where c is the mean (centre) value and sigma is the standard deviation
     *
     * <br></pre></code>
     * 
     * @param leftX  the upper left x value of the gaussian-shaped curve.
     * @param rightX the bottom right x value of the gaussian-shaped curve.
     * @param numberOfPoints the number of points to be used when generating the 
     *               gaussian-shaped curve.
     */
    public FuzzySet generateFuzzySet(double leftX, double rightX, int numberOfPoints)
    {
        double deltaX, x;
        double sigma = (rightX-leftX)/4.0;
        double twoSigmaSquared = 2.0*sigma*sigma;

        int numPoints = returnCorrectedNumPoints(numberOfPoints);

        FuzzySet fs = new FuzzySet(numPoints);
        fs.numPoints = numPoints;

        fs.set[0] = new SetPoint( leftX, 1.0 );

        deltaX = (rightX - leftX) / (numPoints-1);
        x = leftX;

        for(int i=1; i<numPoints-1; i++)
        {
            double membershipValue;
            x += deltaX;
            membershipValue = Math.pow(Math.E, -((x-leftX)*(x-leftX))/twoSigmaSquared);
            fs.set[i] = new SetPoint(x, membershipValue);
        }

        fs.set[numPoints-1] = new SetPoint(rightX, 0.0);
        fs.simplifySet();
        return(fs);
    }


    /*=====================================
     *
     * STATIC CONTROL METHODS
     *
     *===================================*/

    /**
     * Sets the value of the defaultNumPoints variable.
     * This value is used to determine the number of points that will be
     * in the gaussian-shaped fuzzy set generated by the 
     * <code>generateFuzzySet(double leftX, double rightX)</code> method,
     * unless it has a value of < 5, in which case the value of static (class)
     * variable, sFunctionDefaultNumPoints, will be used. This allows 
     * each instance of the RightGaussianFunction to determine its own value for the number
     * of points to be generated. Initially it is set to have the value 0 so
     * that the rightGaussianFunctionDefaultNumPoints value is used. 
     */
    public void setNumPoints(int numPoints)
    {
        if(numPoints < 5)               defaultNumPoints = 5;
        else                            defaultNumPoints = numPoints;
    }

    /**
     * Sets the value of the rightGaussianFunctionDefaultNumPoints static (class) variable.
     * This value is used to determine the number of points that will be
     * in the gaussian-shaped fuzzy set generated by the 
     * <code>generateFuzzySet(double leftX, double rightX)</code> method
     * when the local instance variable defaultNumPoints has not been
     * set or is < 5. Initially it is set to have the value 9. 
     * 
     */

    public static void setDefaultNumberOfPoints(int numPoints)
    {
        if(numPoints < 5)               rightGaussianFunctionDefaultNumPoints = 5;
        else                            rightGaussianFunctionDefaultNumPoints = numPoints;
    }


    /*=========================================
     *
     * METHODS TO MAKE LIFE A LITTLE EASIER
     *
     *=======================================*/

    /** 
     * Keeps the values for the number of points in the gaussian-shaped curve to
     * be >= 5.
     *
     * @param numPoints the integer value to be constrained to be >= 5.
     * 
     */
    protected int returnCorrectedNumPoints(int numPoints)
    {
        if(numPoints < 5)        return(5);

        return(numPoints);
    }
}
