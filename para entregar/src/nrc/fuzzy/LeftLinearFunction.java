/*
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. 
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 *  http://mozilla.org/MPL/2.0/. 
 *
 * Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006 National Research Council of Canada 
 * 
 * This software was initially developed at the National Research Council of Canada (NRC).
 *
 * THE NATIONAL RESEARCH COUNCIL OF CANADA MAKES NO REPRESENTATIONS OR
 * WARRANTIES ABOUT THE SUITABILITY OF THE SOFTWARE, EITHER EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT.
 * THE NATIONAL RESEARCH COUNCIL OF CANADA SHALL NOT BE LIABLE FOR ANY DAMAGES
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
 * THIS SOFTWARE OR ITS DERIVATIVES.
 *
 *
 */


package nrc.fuzzy;

import java.io.*;

/**
 * An implementation of the FuzzySetFunction interface to provide
 * a class with the ability to generate a FuzzySet that is a straight line
 * (linear) from membership value 0 on the left to 1 on the right.
 * This class is typically used when constructing instances of the classes
 * LFuzzySet and LRFuzzySet. 
 * 
 * @author Bob Orchard
 * @author Alexis Eller
 *
 * @see LFuzzySet
 * @see LRFuzzySet
 * @see TrapezoidFuzzySet
 * 
 */
public class LeftLinearFunction implements FuzzySetFunction, Serializable
{

    /** 
     * The default number of points for the linear fuzzy set; normally
     * this is 2 to be most efficient in the use of points in the
     * FuzzySet but may be changed if required (see setNumberOfPoints).
     */
    static int defaultNumPoints = 2;

    /*===============================================
     *
     * CONSTRUCTORS
     *
     *==============================================*/

    /**
     * Create an instance of the LeftLinearFunction class.
     * 
     */
    public LeftLinearFunction()
    {}

    /**
     * Create an instance of the LeftLinearFunction class with
     * the default number of points in the FuzzySets generated by the
     * generateFuzzySet(double leftX, double rightX) method set to
     * numPoints.
     *
     * @param numPoints the default number of points in the FuzzyValues created 
     *                  by the generateFuzzySet(double leftX, double rightX) method
     * 
     */
    public LeftLinearFunction(int numPoints)
    {
        setNumberOfPoints(numPoints);
    }

    /*===============================================
     *
     * METHODS
     *
     *==============================================*/

    /**
     * Generates a FuzzySet that is a straight line
     * (linear) from with membership value 0 on the left to 1 on the right.
     * The number of points in the FuzzySet will be determined by the
     * static variable defaultNumPoints (normally set to 2).
     * 
     * @param leftX the left most X value of the FuzzySet (where membership value is 0)
     * @param rightX the right most X value of the FuzzySet (where membership value is 1)
     */
    public FuzzySet generateFuzzySet(double leftX, double rightX){
        return(generateFuzzySet(leftX, rightX, defaultNumPoints));
    }

    /**
     * Generates a FuzzySet that is a straight line
     * (linear) from with membership value 0 on the left to 1 on the right.
     * 
     * @param leftX the left most X value of the FuzzySet (where membership value is 0)
     * @param rightX the right most X value of the FuzzySet (where membership value is 1)
     * @param numPoints the number of points to generate for the set (if < 2 then it
     *                  will be set to 2)
     */
    public FuzzySet generateFuzzySet(double leftX, double rightX, int numPoints)
    {    
        if (numPoints < 2) numPoints = 2;
        
        FuzzySet fs = new FuzzySet(numPoints);
        fs.numPoints = numPoints;

        if(numPoints == 2){

            fs.set[0] = new SetPoint(leftX, 0.0);
            fs.set[1] = new SetPoint(rightX, 1.0);

            return(fs);

        } else {

            double deltaX, X;
            double deltaY, Y;

            X = deltaX = (rightX - leftX) / (numPoints-1);
            Y = deltaY = 1.0 / (numPoints-1);

            fs.set[0] = new SetPoint(leftX, 0.0);

            for(int i=1; i<numPoints-2; i++){
                fs.set[i] = new SetPoint(leftX + X, Y);
                X += deltaX;
                Y += deltaY;
            }

            fs.set[numPoints-1] = new SetPoint(rightX, 1.0);
            fs.simplifySet();
            return(fs);
        }
    }

    /**
     * Change the static variable defaultNumPoints to a new value (will
     * be set to 2 if an attempt is made to set it to < 2).
     *
     * @param numPoints the new value for the static variable defaultNumPoints
     */
    public static void setNumberOfPoints(int numPoints)
    {
        if(numPoints < 2) defaultNumPoints = 2;
        else              defaultNumPoints = numPoints;
    }
}